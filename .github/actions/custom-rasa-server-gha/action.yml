name: 'Build Rasa Server image'
description: 'Build a Docker image with custom components for Rasa Server'
inputs:
  docker_registry:
    description: "Name of the docker registry which the Docker image should be published to."
    default: "docker.io"
    required: false
  docker_registry_login:
    description: "Login name for the Docker registry."
    required: true
  docker_registry_password:
    description: "Password for the Docker registry."
    required: true
  docker_image_name:
    description: "Docker image name."
    default: "components_server"
    required: false
  docker_image_tag:
    description: "Docker image tag."
    default: ${{ github.run_id }}
    required: false
  docker_registry_push:
    description: "Push a docker image to the registry. If `False` the user can add manual extra steps in their workflow which use the built image."
    default: "true"
    required: false
  dockerfile:
    description: "Path to a custom Dockerfile."
    required: false
  rasa_version:
    description: "Version of the Rasa which should be used to build the image."
    default: "latest"
    required: false
  docker_build_args:
    description: "List of build-time variables."
    required: false

outputs:
 docker_image_name:
    description: "Docker image name, the name contains the registry address and the image name, e.g., `docker.io/my_account/my_image_name`."
    value: ${{ steps.set-output.outputs.docker_image_name }}
 docker_image_tag:
    description: "Tag of the image, e.g., `v1.0`."
    value: ${{ steps.set-output.outputs.docker_image_tag }}
 docker_image_full_name:
    description: "Docker image name (contains an address to the registry, image name, and tag), e.g., `docker.io/my_account/my_image_name:v1.0`."
    value: ${{ steps.set-output.outputs.docker_image_full_name }}

branding:
  icon: 'layers'
  color: 'blue'

runs:
  using: "composite"
  steps:
    - name: Set environment variables
      shell: bash
      run: |-
        # Set Dockerfile
        if [[ "${{ inputs.dockerfile }}" == "" ]]; then
          echo "DOCKERFILE=${{ github.action_path }}/default_files/Dockerfile" >> $GITHUB_ENV
        else
          echo "DOCKERFILE=${{ inputs.dockerfile }}" >> $GITHUB_ENV
        fi

        # Set DOCKER_IMAGE_FULL_NAME
        echo "DOCKER_IMAGE_FULL_NAME=${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}" >> $GITHUB_ENV

    # - name: Copy files
    #   shell: bash
    #   run: |
    #     mkdir -p ${{ github.workspace }}/tmp
    #     # Copy the components directory into the tmp directory
    #     mkdir -p ${{ github.workspace }}/tmp/components
    #     if [[ ! -d ${{ inputs.components_directory }} ]]; then
    #       echo "::error::The components directory (${{ inputs.components_directory }}) doesn't exist." && exit 1
    #     fi
    #     cp -a ${{ inputs.components_directory }}/* ${{ github.workspace }}/tmp/components/

    - name: Docker login
      run: |-
        if [[ "${{ inputs.docker_registry_login}}" != "" ]] && [[ "${{ inputs.docker_registry_password }}" != "" ]]; then
          echo "Login to the ${{ inputs.docker_registry }} registry."
          echo "${{ inputs.docker_registry_password }}" | docker login ${{ inputs.docker_registry }} -u ${{ inputs.docker_registry_login }} --password-stdin
        elif [[ "${{ inputs.docker_registry_login}}" == "" ]] || [[ "${{ inputs.docker_registry_password }}" == "" ]]; then
          echo "::warning::You have to pass the docker_registry_login and docker_registry_password input parameters in order to log in to the ${{ inputs.docker_registry }} registry."
        fi
      shell: bash

    - name: Set the Rasa version
      shell: bash
      run: |
        # Get the latest version
        if [[ "${{ inputs.rasa_version }}" == "latest" ]]; then
          LATEST_RASA_VERSION=$(curl -s ${DOCKERHUB_TAGS_URL} | jq -r '.results[].name' | grep -vE 'refs|aws|latest' | sort -Vr | head -n1)
          echo "RASA_VERSION=${LATEST_RASA_VERSION}" >> $GITHUB_ENV
        else
          # Validate Rasa version
          CHECK_VERSION=$(DOCKER_CLI_EXPERIMENTAL=enabled docker manifest inspect rasa/rasa:${{ inputs.rasa_version }} > /dev/null ; echo $?)
          if [[ $CHECK_VERSION -eq 1 ]]; then
            echo "::error::Rasa in ${{ inputs.rasa_version }} version doesn't exist. Check if the given Rasa version is valid, https://hub.docker.com/r/rasa/rasa/tags" && exit 1
          fi
          echo "RASA_VERSION=${{ inputs.rasa_version }}" >> $GITHUB_ENV
        fi

    - name: Docker build
      run: |-
        echo "Building a docker image using Rasa in ${{ env.RASA_VERSION }} version."
        echo "  Dockerfile arguments:"
        echo "    GITHUB_SHA: $GITHUB_SHA"
        echo "    GITHUB_REF: $GITHUB_REF"
        echo "    DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}"
        echo "    DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}"
        echo "    RASA_VERSION: ${{ env.RASA_VERSION }}"
        echo ""
        echo "  Docker build extra arguments: ${{ inputs.docker_build_args}}"
        echo ""
        docker build \
          --tag "${{ env.DOCKER_IMAGE_FULL_NAME }}" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg DOCKER_IMAGE_NAME="${{ inputs.docker_image_name }}" \
          --build-arg RASA_VERSION="${{ env.RASA_VERSION }}" \
          --build-arg DOCKER_IMAGE_TAG="${{ inputs.docker_image_tag }}" ${{ inputs.docker_build_args }}\
          -f ${{ env.DOCKERFILE }} ${{ github.workspace }}
      shell: bash

    - name: Docker push
      shell: bash
      run: |
        if [[ "${{ inputs.docker_registry_push}}" == "true" ]]; then
          echo "Pushing the ${{ env.DOCKER_IMAGE_FULL_NAME }} image into the registry..."
          docker push ${{ env.DOCKER_IMAGE_FULL_NAME }}
        else
          echo "The image won't be pushed into the repository. The docker_registry_push input parameter has to be set to 'true' in order to push the docker image."
        fi

    - name: Set outputs
      id: set-output
      run: |
        echo "::set-output name=docker_image_name::${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}"
        echo "::set-output name=docker_image_tag::${{ inputs.docker_image_tag }}"
        echo "::set-output name=docker_image_full_name::${{ env.DOCKER_IMAGE_FULL_NAME }}"
      shell: bash

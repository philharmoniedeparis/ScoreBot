name: 'Build Action Server image'
description: 'Build a Docker image with custom actions for Rasa Action Server'
inputs:
  actions_directory:
    description: "Path to the directory with actions."
    default: "${{ github.workspace }}/actions"
    required: false
  utils_directory:
    description: "Path to the directory with utils files."
    default: "${{ github.workspace }}/utils"
    required: false
  requirements_file:
    description: "Path to the requirements.txt file."
    required: false
  docker_registry:
    description: "Name of the docker registry which the Docker image should be published to."
    default: "docker.io"
    required: false
  docker_registry_login:
    description: "Login name for the Docker registry."
    required: true
  docker_registry_password:
    description: "Password for the Docker registry."
    required: true
  docker_image_name:
    description: "Docker image name."
    default: "action_server_philharmonie"
    required: false
  docker_image_tag:
    description: "Docker image tag."
    default: ${{ github.run_id }}
    required: false
  docker_registry_push:
    description: "Push a docker image to the registry. If `False` the user can add manual extra steps in their workflow which use the built image."
    default: "true"
    required: false
  dockerfile:
    description: "Path to a custom Dockerfile."
    required: false
  rasa_sdk_version:
    description: "Version of the Rasa SDK which should be used to build the image."
    default: "latest"
    required: false
  docker_build_args:
    description: "List of build-time variables."
    required: false

outputs:
 docker_image_name:
    description: "Docker image name, the name contains the registry address and the image name, e.g., `docker.io/my_account/my_image_name`."
    value: ${{ steps.set-output.outputs.docker_image_name }}
 docker_image_tag:
    description: "Tag of the image, e.g., `v1.0`."
    value: ${{ steps.set-output.outputs.docker_image_tag }}
 docker_image_full_name:
    description: "Docker image name (contains an address to the registry, image name, and tag), e.g., `docker.io/my_account/my_image_name:v1.0`."
    value: ${{ steps.set-output.outputs.docker_image_full_name }}

branding:
  icon: 'layers'
  color: 'blue'

runs:
  using: "composite"
  steps:
    - name: Set environment variables
      shell: bash
      run: |-
        # Set Dockerfile
        if [[ "${{ inputs.dockerfile }}" == "" ]]; then
          echo "DOCKERFILE=${{ github.action_path }}/default_files/Dockerfile" >> $GITHUB_ENV
        else
          echo "DOCKERFILE=${{ inputs.dockerfile }}" >> $GITHUB_ENV
        fi

        # Set DOCKER_IMAGE_FULL_NAME
        echo "DOCKER_IMAGE_FULL_NAME=${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}:${{ inputs.docker_image_tag }}" >> $GITHUB_ENV

    - name: Copy files
      shell: bash
      run: |
        # Set a path for the requirements.txt file
        mkdir -p ${{ github.workspace }}/tmp
        if [[ "${{ inputs.requirements_file }}" == "" ]]; then
          # Check if requirements file exists
          if [[ -d ${{ inputs.actions_directory }}/requirements.txt ]]; then
            cp -a ${{ inputs.actions_directory }}/requirements.txt ${{ github.workspace }}/tmp/requirements.txt
          else
            # Copy default files into the tmp directory
            cp -a ${{ github.action_path }}/default_files/requirements.txt ${{ github.workspace }}/tmp/requirements.txt
          fi
        else
          cp -a  ${{ inputs.requirements_file }} ${{ github.workspace }}/tmp/requirements.txt || echo "::error::The requirements file (${{ inputs.requirements_file }}) doesn't exist."
        fi

        # Copy the actions directory into the tmp directory
        mkdir -p ${{ github.workspace }}/tmp/actions
        if [[ ! -d ${{ inputs.actions_directory }} ]]; then
          echo "::error::The actions directory (${{ inputs.actions_directory }}) doesn't exist." && exit 1
        fi
        cp -a ${{ inputs.actions_directory }}/* ${{ github.workspace }}/tmp/actions/

        # Copy the actions directory into the tmp directory
        mkdir -p ${{ github.workspace }}/tmp/utils
        if [[ ! -d ${{ inputs.utils_directory }} ]]; then
          echo "::error::The utils directory (${{ inputs.utils_directory }}) doesn't exist." && exit 1
        fi
        cp -a ${{ inputs.utils_directory }}/* ${{ github.workspace }}/tmp/utils/

    - name: Set the Rasa SDK version
      shell: bash
      run: |
        DOCKERHUB_TAGS_URL="https://registry.hub.docker.com/v2/repositories/rasa/rasa-sdk/tags?page_size=10000"
        # Get the latest version
        if [[ "${{ inputs.rasa_sdk_version }}" == "latest" ]]; then
          LATEST_RASA_SDK_VERSION=$(curl -s ${DOCKERHUB_TAGS_URL} | jq -r '.results[].name' | grep -vE 'refs|aws|latest' | sort -Vr | head -n1)
          echo "RASA_SDK_VERSION=${LATEST_RASA_SDK_VERSION}" >> $GITHUB_ENV
        else
          # Validate Rasa SDK version
          CHECK_VERSION=$(curl --silent ${DOCKERHUB_TAGS_URL} | jq -r '.results[] | select(.name=="${{ inputs.rasa_sdk_version }}") | .name')
          if [[ "$CHECK_VERSION" != "${{ inputs.rasa_sdk_version }}" ]]; then
            echo "::error::Rasa SDK in ${{ inputs.rasa_sdk_version }} version doesn't exist. Check if the given Rasa SDK version is valid, https://hub.docker.com/r/rasa/rasa-sdk/tags" && exit 1
          fi
          echo "RASA_SDK_VERSION=${{ inputs.rasa_sdk_version }}" >> $GITHUB_ENV
        fi

    - name: Docker login
      run: |-
        if [[ "${{ inputs.docker_registry_login}}" != "" ]] && [[ "${{ inputs.docker_registry_password }}" != "" ]]; then
          echo "Login to the ${{ inputs.docker_registry }} registry."
          echo "${{ inputs.docker_registry_password }}" | docker login ${{ inputs.docker_registry }} -u ${{ inputs.docker_registry_login }} --password-stdin
        elif [[ "${{ inputs.docker_registry_login}}" == "" ]] || [[ "${{ inputs.docker_registry_password }}" == "" ]]; then
          echo "::warning::You have to pass the docker_registry_login and docker_registry_password input parameters in order to log in to the ${{ inputs.docker_registry }} registry."
        fi
      shell: bash

    - name: Docker build
      run: |-
        echo "Building a docker image using Rasa SDK in ${{ env.RASA_SDK_VERSION }} version."
        echo "  Dockerfile arguments:"
        echo "    GITHUB_SHA: $GITHUB_SHA"
        echo "    GITHUB_REF: $GITHUB_REF"
        echo "    DOCKER_IMAGE_NAME: ${{ inputs.docker_image_name }}"
        echo "    DOCKER_IMAGE_TAG: ${{ inputs.docker_image_tag }}"
        echo "    RASA_SDK_VERSION: ${{ env.RASA_SDK_VERSION }}"
        echo ""
        echo "  Docker build extra arguments: ${{ inputs.docker_build_args}}"
        echo ""
        docker build \
          --tag "${{ env.DOCKER_IMAGE_FULL_NAME }}" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          --build-arg DOCKER_IMAGE_NAME="${{ inputs.docker_image_name }}" \
          --build-arg RASA_SDK_VERSION="${{ env.RASA_SDK_VERSION }}" \
          --build-arg DOCKER_IMAGE_TAG="${{ inputs.docker_image_tag }}" ${{ inputs.docker_build_args }}\
          -f ${{ env.DOCKERFILE }} ${{ github.workspace }}
      shell: bash

    - name: Docker push
      shell: bash
      run: |
        if [[ "${{ inputs.docker_registry_push}}" == "true" ]]; then
          echo "Pushing the ${{ env.DOCKER_IMAGE_FULL_NAME }} image into the registry..."
          docker push ${{ env.DOCKER_IMAGE_FULL_NAME }}
        else
          echo "The image won't be pushed into the repository. The docker_registry_push input parameter has to be set to 'true' in order to push the docker image."
        fi

    - name: Set outputs
      id: set-output
      run: |
        echo "::set-output name=docker_image_name::${{ inputs.docker_registry }}/${{ inputs.docker_image_name }}"
        echo "::set-output name=docker_image_tag::${{ inputs.docker_image_tag }}"
        echo "::set-output name=docker_image_full_name::${{ env.DOCKER_IMAGE_FULL_NAME }}"
      shell: bash
